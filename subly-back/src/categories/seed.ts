// src/seed.ts
import { NestFactory } from '@nestjs/core';
import { AppModule } from 'src/app.module';
import { DataSource } from 'typeorm';
import { Category } from './category.entity';

async function bootstrapSeed(): Promise<void> {
  // 1. Monte un contexte NestJS sans serveur HTTP
  const appContext = await NestFactory.createApplicationContext(AppModule);

  // 2. R√©cup√®re l'instance TypeORM DataSource (configur√©e par TypeOrmModule.forRoot)
  const dataSource = appContext.get(DataSource);

  // 3. R√©cup√®re le Repository<Category>
  const categoryRepo = dataSource.getRepository(Category);

  // 4. Les donn√©es √† seed (typage explicite)
  const categories: Partial<Category>[] = [
    { name: 'FOOD', icon: 'üçî' },
    { name: 'TRANSPORT', icon: 'üöó' },
    { name: 'HOUSING', icon: 'üè†' },
    // ‚Ä¶ ajoute ici toutes tes cat√©gories
  ];

  // 5. On boucle et on ins√®re si inexistant
  for (const data of categories) {
    const exists = await categoryRepo.findOne({ where: { name: data.name! } });
    if (!exists) {
      const category = categoryRepo.create(data);
      await categoryRepo.save(category);
      console.log(`Seeded category: ${data.name}`);
    }
  }

  // 6. Ferme proprement le contexte NestJS
  await appContext.close();
  console.log('‚úÖ Seeding termin√©');
}

bootstrapSeed().catch((err) => {
  console.error('‚ùå Erreur durant le seeding :', err);
  process.exit(1);
});
